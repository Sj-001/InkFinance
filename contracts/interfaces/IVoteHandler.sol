//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

interface IVoteHandler {
    enum VoteStatus {
        PENDING,
        AGREE,
        DENY
    }

    /// @notice once anyone vote for a proposal, this event will be emit
    /// @param voteID generated by keccak256(proposalID + step), referal to VoteIdentityHelper
    event Vote(
        bytes32 indexed voteID,
        address indexed voter,
        bool agree,
        uint256 count,
        string feedback
    );

    // if these are same, means this process need restart.
    struct VoteIdentity {
        bytes32 proposalID;
        bytes32 step;
    }

    struct VoteInfo {
        VoteStatus status;
        VoteIdentity identity;
        uint256 totalVotes;
        uint256 agreeVotes;
        uint256 agreeVoterNum;
        uint256 denyVotes;
        uint256 denyVoterNum;
    }

    struct MemberVoteInfo {
        address voter;
        uint256 count;
    }

    /// @dev summary information of the proposal vote
    /// @param identity which step of the proposal
    /// @return result summary infomation (referal to VoteInfo struct)
    function getVoteSummary(VoteIdentity calldata identity)
        external
        view
        returns (VoteInfo memory result);

    /// @notice the voter vote proposal
    /// @param identity target proposal, include step
    /// @param agree true=agree, false=disagree
    /// @param count how many votes
    /// @param feedback comment of the vote action
    /// @param data extra data
    function vote(
        VoteIdentity calldata identity,
        bool agree,
        uint256 count,
        string calldata feedback,
        bytes calldata data
    ) external;

    /// @notice get proposal vote informations
    /// @param identity target proposal, include step
    /// @param agreeOrDisagreeOption query agree vote info or disagree vote info
    /// @param startVoter query from this address, limit query size
    /// @param pageSize limit size
    /// @return voteDetails vote informations
    function getVoteDetail(
        VoteIdentity calldata identity,
        bool agreeOrDisagreeOption,
        address startVoter,
        uint256 pageSize
    ) external view returns (MemberVoteInfo[] memory voteDetails);

    /// @notice provide frontend to make sure if the user could vote at that moment
    function allowToVote(VoteIdentity calldata identity, address voteUser)
        external
        view
        returns (bool allowToVote);

    /// @notice get vote amount of a EOA
    /// @param identity target proposal, include step
    /// @param account EOA address
    /// @return agreeVotes agree votes
    /// @return denyVotes deny votes
    function getVoteDetailByAccount(
        VoteIdentity calldata identity,
        address account
    ) external view returns (uint256 agreeVotes, uint256 denyVotes);
}
